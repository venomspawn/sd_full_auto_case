# frozen_string_literal: true

module SDFullAutoCase
  module Base
    class MessageDrivenFSA
      # Модуль, предназначенный для расширения содержащим классом и
      # предоставляющий средства описания графа переходов состояния заявки
      module Edges
        # Возвращает ассоциативный массив, в котором объекты с информацией о
        # вершине графа переходов состояния заявки и управляющем сообщении
        # отображаются в информацию о переходе по дуге
        # @return [Hash{Array<(String, String)> => Array<EdgeInfo>}]
        #   результирующий ассоциативный массив
        def edges
          @edges ||= {}
        end

        # Создаёт объект с информацией о переходе по дуге графа переходов
        # состояния заявки и ассоциирует его с дугой, добавляя дугу, если она
        # отсутствовала в графе
        # @param [Array] from
        #   список названий исходных состояний заявки
        # @param [Hash] options
        #   ассоциативный массив, первый ключ которого интерпретируется в
        #   качестве название исходного состояния заявки, а соответствующее
        #   значение — в качестве названия нового состояния заявки. Если в
        #   качестве названия исходного состояния предоставить `nil` (то есть
        #   объект класса `NilClass`), пустую строку или строку `nil`, то такое
        #   значение будет интерпретировано в качестве отсутствия состояния
        #   заявки. Порядок следующих необязательных ключей неважен:
        #   *   `:on` — интерпретируется в качестве названия формата сообщения
        #       или списка названий форматов сообщений;
        #   *   `:if` — значением ключа должен быть объект типа Proc;
        #   *   `:set` — значением ключа должен быть ассоциативный массив, в
        #       котором значения являются строками или объектами `nil`;
        #   *   `:need` — значением ключа должно быть название извлекаемого
        #       атрибута заявки или список названий извлекаемых атрибутов
        #       заявки;
        #   *   `:after` — значением ключа должен быть объект, предоставляющий
        #       метод `call`, который принимает запись заявки и ассоциативный
        #       массив её атрибутов в качестве аргументов.
        # @raise [JSON::Schema::ValidationError]
        #   если аргумент не является ассоциативным массивом
        # @raise [JSON::Schema::ValidationError]
        #   если значение ключа `set` или `need` не является корректным
        def edge(*from_list, **options)
          from_list = sanitize_from(*from_list, options.first.first)
          to = options.first.last.to_s
          add_edges(from_list, to, options)
        end

        private

        # Возвращает список названий исходных состояний
        # @param [Array] from_list
        #   начальный список названий исходных состояний
        # @return [Array<String>]
        #   результирующий список названий
        def sanitize_from(*args)
          args.map!(&:to_s)
          args.map! { |from| from.empty? || from == 'nil' ? nil : from }
        end

        # Добавляет дуги
        # @param [Array<String>] from_list
        #   список названий исходных состояний
        # @param [String] to
        #   название результирующего состояния
        # @param [Hash] options
        #   ассоциативный массив параметров
        def add_edges(from_list, to, options)
          on = Array(options[:on]).map(&:to_s)
          from_list.each do |from|
            on.each do |signal|
              edges[[from, signal]] ||= []
              edges[[from, signal]] << EdgeInfo.new(state: to, **options)
            end
          end
        end
      end
    end
  end
end
