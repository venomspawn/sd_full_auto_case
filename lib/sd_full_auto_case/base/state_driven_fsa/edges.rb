# frozen_string_literal: true

module SDFullAutoCase
  module Base
    class StateDrivenFSA
      # Модуль, предназначенный для расширения содержащим классом и
      # предоставляющий средства описания графа переходов состояния заявки
      module Edges
        # Возвращает ассоциативный массив, в котором объекты с информацией о
        # дугах графа переходов состояния заявки отображаются в дополнительную
        # информацию о переходе по дуге
        # @return [Hash{Array<(String, String)> => EdgeInfo}]
        #   результирующий ассоциативный массив
        def edges
          @edges ||= {}
        end

        # Создаёт объект с информацией о переходе по дуге графа переходов
        # состояния заявки и ассоциирует его с дугой, добавляя дугу, если она
        # отсутствовала в графе
        # @param [Hash] options
        #   ассоциативный массив, первый ключ которого интерпретируется в
        #   качестве название исходного состояния заявки, а соответствующее
        #   значение — в качестве названия нового состояния заявки. Если в
        #   качестве названия исходного состояния предоставить `nil` (то есть
        #   объект класса `NilClass`), пустую строку или строку `nil`, то такое
        #   значение будет интерпретировано в качестве отсутствия состояния
        #   заявки. Порядок следующих необязательных ключей неважен:
        #   *   `:check` — значением ключа должен быть объект типа Proc;
        #   *   `:raise` — значением ключа должен быть класс ошибок;
        #   *   `:set` — значением ключа должен быть ассоциативный массив, в
        #       котором значения являются строками или объектами `nil`;
        #   *   `:need` — значением ключа должно быть название извлекаемого
        #       атрибута заявки или список названий извлекаемых атрибутов
        #       заявки;
        #   *   `:after` — значением ключа должен быть объект, предоставляющий
        #       метод `call`, который принимает запись заявки и ассоциативный
        #       массив её атрибутов в качестве аргументов.
        # @raise [JSON::Schema::ValidationError]
        #   если аргумент не является ассоциативным массивом
        # @raise [JSON::Schema::ValidationError]
        #   если значение ключа `set` или `need` не является корректным
        def edge(options)
          names = options.first
          from = names.first.to_s
          from = nil if from.empty? || from == 'nil'
          to = names.last.to_s
          edges[[from, to]] = EdgeInfo.new(options)
        end
      end
    end
  end
end
